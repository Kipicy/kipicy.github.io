try{$k}catch(e){$k={}}
(function(){var d=document,canvasStyle=d.head.appendChild(d.createElement("style"))
canvasStyle.innerHTML="/*k-ripple.js*/.k-ripple canvas{width:100%;height:100%;position:absolute;top:0;left:0;opacity:.1;}"
$k.ripple={version:"1.1",versionNum:"00000127",maintainers:[{name:"KIPI-C",web:"http://kipi-c.github.io/"}],contributors:[{name:"KIPI-C",web:"http://kipi-c.github.io/"}],bugs:{"web":"https://github.com/k-plugin-development-team/k-update.js"},connetList:[],updata:function(){var newList=d.getElementsByClassName("k-ripple")
for(let i=0;i<$k.ripple.connetList.length;i++){let connetBox=$k.ripple.connetList[i]
if(!connetBox in $k.ripple.connetList){if(!(connetBox.element in d.all)){if(typeof connetBox=="object"&&!contains(newList,connetBox.element)){$k.ripple.connetList.splice(i,1);i--}}
else $k.ripple.remove(connetBox.element)}}
for(i in newList){let newEle=newList[i]
if(typeof newList[i]=="object"){if(!scontains($k.ripple.connetList,newEle)){let id=$k.ripple.connetList.push({})-1,cav=newEle.appendChild(d.createElement("canvas")),touch=false
$k.ripple.connetList[id]={element:newEle,canvas:cav,anList:[],configure:{},mousedown:false,onbeforePush:function(e){return e},onbeforeDraw:function(){},onafterDraw:function(){}}
let box=$k.ripple.connetList[id],anList=box.anList
$k.ripple.connetList[id].__proto__=null
cfgParser(newEle,$k.ripple.connetList[id].configure)
cav.width=parseInt(getComputedStyle(newEle).width)*2
cav.height=parseInt(getComputedStyle(newEle).height)*2
getComputedStyle(newEle).position=="static"?newEle.style.position="relative":0
newEle.addEventListener("mousedown",function(e){if(!touch){box.mousedown=true
anList.push(box.onbeforePush({r:box.configure.initialRadius,opacity:box.configure.opacity,fade:false,finish:false,x:e.offsetX*2,y:e.offsetY*2,color:box.configure.color,a:box.configure.acceleration,speed:box.configure.speed}))}})
d.addEventListener("mouseup",function(e){if(!touch){box.mousedown=false}})
newEle.addEventListener("touchstart",function(e){box.mousedown=true
touch=true
var offset=e.offsetTop;if(e.offsetParent!=null)offset+=getTop(e.offsetParent);anList.push({r:box.configure.initialRadius,opacity:box.configure.opacity,fade:false,finish:false,x:(e.changedTouches[0].pageX-getOffsetLeft(newEle))*2,y:(e.changedTouches[0].pageY-getOffsetTop(newEle))*2,color:box.configure.color,a:box.configure.acceleration,speed:box.configure.speed})})
newEle.addEventListener("touchend",function(e){box.mousedown=false})}else{}}}
return $k.ripple.connetList},remove:function(e){for(i in $k.ripple.connetList){if(e==$k.ripple.connetList[i].element){e.removeChild($k.ripple.connetList[i].canvas)
e.className=e.className.replace("k-ripple","")
$k.ripple.connetList.splice(i,1)
return true}}
return false}}
function anraf(){for(i in $k.ripple.connetList){let cav=$k.ripple.connetList[i].canvas,ctx=cav.getContext("2d")
if($k.ripple.connetList[i].anList.length>0){ctx.clearRect(0,0,cav.width,cav.height)}
for(ii in $k.ripple.connetList[i].anList){let cfg=$k.ripple.connetList[i].anList[ii],max
if(!cfg.finish){if(cav.width>cav.height){max=cav.width*2-cfg.x>cfg.x?cav.width*2-cfg.x:cfg.x}
else{max=cav.height*2-cfg.y>cfg.y?cav.height*2-cfg.y:cfg.y}
if(cfg.color!=ctx.fillStyle)ctx.fillStyle=cfg.color
if($k.ripple.connetList[i].mousedown&&!cfg.fade){if(cfg.r<max){cfg.r+=cfg.speed
cfg.speed+=cfg.a}
else cfg.fade=true}
else if(!$k.ripple.connetList[i].mousedown&&!cfg.fade){if(cfg.r<max){cfg.r+=max/20;cfg.speed+=cfg.a}
else cfg.fade=true}
else{if(!$k.ripple.connetList[i].mousedown){if(cfg.opacity>0.1)cfg.opacity-=0.1
else{cfg.opacity=0;cfg.finish=true}}
if($k.ripple.connetList[i].mousedown&&cfg.opacity<1){if(cfg.opacity>0.1)cfg.opacity-=0.1
else{cfg.opacity=0;cfg.finish=true}}}
ctx.beginPath();ctx.globalAlpha=cfg.opacity
ctx.arc(cfg.x,cfg.y,cfg.r,0,Math.PI*2)
ctx.fill()
ctx.closePath()}}}
requestAnimationFrame(function(){anraf()})}
function cfgParser(e,c){c.color="#fff"
c.speed=5
c.acceleration=.1
c.initialRadius=5
c.opacity=1
if(e.getAttribute("k-ripple")){s=e.getAttribute("k-ripple").split(",")
for(i in s){t=s[i].slice(s[i].indexOf(":")+1,s[i].length)
switch(s[i].slice(0,s[i].indexOf(":"))){case"color":c.color=t;break;case"speed":c.speed=parseInt(t);break;case"acceleration":c.acceleration=parseInt(t);break;case"initialRadius":c.initialRadius=parseInt(t);break;case"opacity":c.opacity=parseInt(t);break;}}}}
function contains(arr,obj){var i=arr.length;while(i--){if(arr[i]===obj){return true;}}
return false;}
function scontains(arr,obj){var i=arr.length;while(i--){if(arr[i].element===obj){return true;}}
return false;}
function getOffsetTop(e){var offset=e.offsetTop;if(e.offsetParent!=null)offset+=getOffsetTop(e.offsetParent);return offset;}
function getOffsetLeft(e){var offset=e.offsetLeft;if(e.offsetParent!=null)offset+=getOffsetLeft(e.offsetParent);return offset;}
anraf()
setInterval(function(){let i=0;for(i in $k.ripple.connetList){for(let ii=0;ii<$k.ripple.connetList[i].anList.length;ii++){if($k.ripple.connetList[i].anList[ii].finish==true){$k.ripple.connetList[i].anList.splice(ii,1);ii--}}}},100)}());